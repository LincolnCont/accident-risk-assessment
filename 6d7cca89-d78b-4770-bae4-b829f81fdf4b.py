#!/usr/bin/env python
# coding: utf-8

# ## –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—ã sql

# In[1]:


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import sklearn.metrics

from sqlalchemy import create_engine
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split, RandomizedSearchCV, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.metrics import confusion_matrix, f1_score, roc_auc_score, roc_curve, precision_score, accuracy_score, recall_score, precision_recall_curve
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.dummy import DummyClassifier
from sklearn.feature_selection import SelectFromModel
from lightgbm import LGBMClassifier
from catboost import CatBoostClassifier


# In[2]:


db_config = {
'user': 'praktikum_student', # –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
'pwd': 'Sdf4$2;d-d30pp', # –ø–∞—Ä–æ–ª—å,
'host': 'rc1b-wcoijxj3yxfsf3fs.mdb.yandexcloud.net',
'port': 6432, # –ø–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è,
'db': 'data-science-vehicle-db' # –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
} 


connection_string = 'postgresql://{}:{}@{}:{}/{}'.format(
    db_config['user'],
    db_config['pwd'],
    db_config['host'],
    db_config['port'],
    db_config['db'],
)


# In[3]:


engine = create_engine(connection_string)


# ## –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–∏—á–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü

# ## –¢–∞–±–ª–∏—Ü–∞ case_ids

# <div class="alert alert-info">
# <font size="4">üçï<b> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />
# –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–µ–º—É –ë–î. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º:
# 
# `SELECT table_name
# FROM information_schema.tables
# WHERE table_type = 'BASE TABLE'`

# In[4]:


query = '''

SELECT *
FROM case_ids
LIMIT 5

'''

case_id_df = pd.read_sql_query(query, con=engine) 
case_id_df


# <div class="alert alert-success">
# <font size="4"><b>‚úîÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />    
# –ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã–≥—Ä—É–∂–∞–µ—à—å —Ç–∞–±–ª–∏—á–∫—É –ø–æ –ª–∏–º–∏—Ç—É 5, –∞ –Ω–µ —Ü–µ–ª–∏–∫–æ–º. –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–º –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è - —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫—É –±—ã –∑—Ä—è –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ )

# –¢–∞–±–ª–∏—Ü–∞ case_ids —Å–æ–¥–µ—Ä–∂–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ case_id. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ db_year –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ –≥–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

# ## –¢–∞–±–ª–∏—Ü–∞ vehicles

# In[5]:


query = '''

SELECT *
FROM vehicles
LIMIT 5

'''

vehicles_df = pd.read_sql_query(query, con=engine) 
vehicles_df


# –ò–º–µ–µ—Ç –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ case_id –∏ –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ party_number, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å —Ç–∞–±–ª–∏—Ü–µ–π collisions –∏ —Ç–∞–±–ª–∏—Ü–µ–π parties. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —ç—Ç–æ case_id and party_number.

# ## –¢–∞–±–ª–∏—Ü–∞ parties

# In[6]:


query = '''

SELECT *
FROM parties
LIMIT 5

'''

parties_df = pd.read_sql_query(query, con=engine) 
parties_df


# –ò–º–µ–µ—Ç –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã–π case_id, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –î–¢–ü –≤ —Ç–∞–±–ª–∏—Ü–µ collisions. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–¥–µ—Å—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∏–∑ —Å—Ç–æ—Ä–æ–Ω, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –î–¢–ü. –ï—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å –¥–≤–µ –º–∞—à–∏–Ω—ã, –≤ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º case_id. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —ç—Ç–æ case_id and party_number

# ## –¢–∞–±–ª–∏—Ü–∞ collisions

# In[7]:


query = '''

SELECT *
FROM collisions
LIMIT 5
'''

collisions_df = pd.read_sql_query(query, con=engine) 
collisions_df


# –¢–∞–±–ª–∏—Ü–∞ collisions –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –î–¢–ü. –ù–∞–ø—Ä–∏–º–µ—Ä, –≥–¥–µ –æ–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏ –∫–æ–≥–¥–∞. –ò–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π case_id.

# –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–º–µ—é—Ç –æ–±—â–∏—é –∫–ª—é—á case_id. –ú–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤, –Ω–æ –≤ —Ü–µ–ª–æ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏.

# <div class="alert alert-success">
# <font size="4"><b>‚úîÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />    
# üëå

# ##  –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –î–¢–ü

# ## –í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤

# –í—ã—è—Å–Ω–∏–º, –≤ –∫–∞–∫–∏–µ –º–µ—Å—è—Ü—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ä–∏–π. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–≥—Ä—É–∑–∏–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã collisions, –ø–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ case_id –∏ —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º.

# In[8]:


query = '''

WITH help AS
(SELECT DATE_TRUNC('MONTH', collision_date)::date AS collisions_month, 
       count(case_id) AS collisions_count
FROM collisions
WHERE collision_date BETWEEN '2009-01-01' AND '2012-06-01'
GROUP BY collisions_month)

SELECT EXTRACT(MONTH FROM collisions_month) AS month,
    AVG(collisions_count) AS collisions_avg
FROM help
GROUP BY month
'''
coll_count_df = pd.read_sql_query(query, con=engine) 
coll_count_df


# –ü–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ:

# In[9]:




coll_count_df.sort_values(by='collisions_avg', ascending=False).plot(x='month',
                                                                          y='collisions_avg',
                                                                          kind='bar',
                                                                          grid=True,
                                                                          legend=False,
                                                                          rot=0,
                                                                          figsize=(12,6));
plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ä–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º');
plt.xlabel('–ú–µ—Å—è—Ü');
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ä–∏–π');


# <div class="alert alert-warning">
# <font size="4"><b>‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ V2</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />
# –ü—Ä–∏–Ω—è—Ç–æ. –ù–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –µ—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –≤—Å—ë-—Ç–∞–∫–∏ —Å—Ç–æ–∏–ª–æ –Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —á–∏—Å–ª—É –∞–≤–∞—Ä–∏–π, –∞ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–≤—ã—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤: –æ—Ç —è–Ω–≤–∞—Ä—è –∫ –¥–µ–∫–∞–±—Ä—é.

# –ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–¢–ü –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–∏–æ–¥ —Å —è–Ω–≤–∞—Ä—è –ø–æ –º–∞–π, –¥–∞–ª—å—à–µ –∏–¥–µ—Ç —Ä–µ–∑–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ, –ø–∏–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–∞—Ä—Ç. –¢–∞–∫–æ–π –≤—Å–ø–ª–µ—Å–∫ –º–æ–∂–Ω–æ –æ–±—å—è—Å–Ω–∏—Ç—å –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º–∏ –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–æ—Ä–æ–≥ –≤ –∑–∏–º–Ω–µ-–≤–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥, –ª–∏–±–æ –∂–µ –Ω–µ–ø–æ–ª–Ω–æ—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –∏—é–Ω—è –ø–æ –¥–µ–∫–∞–±—Ä—å.

# 

# In[10]:


query = '''

SELECT DISTINCT date_trunc('month', collision_date)::date AS collision_month,
                count(case_id) AS case_count
FROM collisions
GROUP BY 1
HAVING count(case_id) < 30000
ORDER by 2 

'''
missing_count_df = pd.read_sql_query(query, con=engine) 
missing_count_df


# ## –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –¥–ª—è —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã

# 
# –í—ã—è—Å–Ω–∏—Ç—å, –≤ –∫–∞–∫–∏–µ –º–µ—Å—è—Ü—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–≥–∏ –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º - –º–æ–∫—Ä–∞—è –ª–∏–±–æ –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω–∞—è.
# 
# –í—ã—è–≤–∏—Ç—å –ø—è—Ç—å –æ–∫—Ä—É–≥–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤–∏–Ω–æ–≤–Ω–∏–∫–∞–º–∏ –∞–≤–∞—Ä–∏–∏ —è–≤–ª—è—é—Ç—Å—è –ø—å—è–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (—Å 23:00 –¥–æ 05:00), –∞ —Ç–∞–∫–∂–µ —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —ç—Ç–∏–º –æ–∫—Ä—É–≥–∞–º
# 
# –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç –ø–æ –º–µ—Å—è—Ü–∞–º, –æ—Ü–µ–Ω–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é —Å—Ç—Ä–∞—Ö–æ–≤–∫—É. –≤–ª–∏—è–µ—Ç –ª–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Å—É–º–º—É?
# 
# –í–ª–∏—è–µ—Ç –ª–∏ —Ç–∏–ø –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ —Å—Ç–µ–ø–µ–Ω—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è –Ω–∞ —Å—Ç–µ–ø–µ–Ω—å –≤–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è –≤ –î–¢–ü?
# 
# –í—ã—è—Å–Ω–∏—Ç—å, –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –∫–∞–∫–∏–º —Ç–∏–ø–æ–º –∫—É–∑–æ–≤–∞ —á–∞—â–µ –≤—Å–µ–≥–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∏–Ω–æ–≤–Ω–∏–∫–æ–º –∞–≤–∞—Ä–∏–∏.
# 
# –ó–∞–≤–∏—Å–∏—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∞—Ä–∏–π –æ—Ç —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è? —Å—Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ–≤–ª–µ—á–µ–Ω–æ –≤ —Ç–∞–∫–∏–µ –î–¢–ü?

# <div class="alert alert-success">
# <font size="4"><b>‚úîÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />    
# –ó–∞–¥–∞—á —Ä–æ–≤–Ω–æ 6, –∫–∞–∫ –∏ —Ç—Ä–µ–±—É–µ—Ç –¢–ó üëå

# ### –ó–∞–¥–∞—á–∞ 1

# –í—ã—è—Å–Ω–∏–º, –≤ –∫–∞–∫–∏–µ –º–µ—Å—è—Ü—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–≥–∏ –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º - –º–æ–∫—Ä–∞—è –ª–∏–±–æ –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω–∞—è.

# In[11]:


query = '''

SELECT DISTINCT extract(MONTH FROM cast(collision_date AS date))::int AS collision_month,
                count(road_surface) AS bad_surface_count
FROM collisions
WHERE road_surface = 'wet'
  OR road_surface = 'snowy'
GROUP BY 1
ORDER BY 2 DESC

'''
bad_surface_df = pd.read_sql_query(query, con=engine) 
bad_surface_df


# In[12]:


plt.figure(figsize=[10,6])
sns.lineplot(data=bad_surface_df, x='collision_month', y='bad_surface_count', label='–ß–∏—Å–ª–æ –î–¢–ü', color='purple')

plt.legend()
plt.title('–°–ª—É—á–∞–∏ –î–¢–ü –Ω–∞ –º–æ–∫—Ä–æ–π/—Å–Ω–µ–∂–Ω–æ–π –¥–æ—Ä–æ–≥–µ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ 2011 –≥–æ–¥')
plt.xlabel('–ú–µ—Å—è—Ü')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–¢–ü')
plt.grid()
plt.show()


# –ö–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å –æ–∫—Ç—è–±—Ä—è –ø–æ –º–∞—Ä—Ç, –ø–∏–∫–æ–≤—ã–π –º–µ—Å—è—Ü - —Ñ–µ–≤—Ä–∞–ª—å

# ### –ó–∞–¥–∞—á–∞ 2

# –í—ã—è–≤–∏—Ç—å –ø—è—Ç—å –æ–∫—Ä—É–≥–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤–∏–Ω–æ–≤–Ω–∏–∫–∞–º–∏ –∞–≤–∞—Ä–∏–∏ —è–≤–ª—è—é—Ç—Å—è –ø—å—è–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (—Å 23:00 –¥–æ 05:00), –∞ —Ç–∞–∫–∂–µ —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —ç—Ç–∏–º –æ–∫—Ä—É–≥–∞–º.

# In[13]:


query = '''

SELECT county_location,
       count(c.case_id) AS case_count,
       round(avg(v.vehicle_age), 1) AS avg_vehicle_age
FROM parties p
JOIN collisions c ON c.case_id = p.case_id
JOIN vehicles v ON c.case_id = v.case_id
WHERE at_fault = 1
  AND party_sobriety like '%%had been%%'
  AND (extract(HOUR FROM cast(collision_time AS TIME))::int <= 5
       OR extract(HOUR FROM cast(collision_time AS TIME))::int >= 23)
GROUP BY county_location
ORDER BY 2 DESC
LIMIT 5

'''
drunk_df = pd.read_sql_query(query, con=engine) 
drunk_df


# –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å –∑–∞–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ, –∞ –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π

# ### –ó–∞–¥–∞—á–∞ 3 

# –í–ª–∏—è–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—Å—è –Ω–∞ —Ç—è–∂–µ—Å—Ç—å –∞–≤–∞—Ä–∏–∏

# In[14]:


query = '''
SELECT c.collision_damage,
       AVG(v.vehicle_age) AS avg_vehicle_age
FROM collisions AS c 
JOIN vehicles AS v ON c.case_id=v.case_id
GROUP BY c.collision_damage
'''

avg_vehicle_age = pd.read_sql_query(query, con=engine).sort_values(by='avg_vehicle_age', ascending=False)

sns.barplot(data=avg_vehicle_age, 
                 x='avg_vehicle_age', 
                 y='collision_damage');
plt.gcf().set_size_inches(12,6);
plt.subplots_adjust(top=.95);


# –ß–µ–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—Å—è, —Ç–µ–º —Å–µ—Ä—å–µ–∑–Ω–µ–µ –ø–æ–≤—Ä–µ–¥–µ–Ω–∏—è –∏ —Ç–∞–∫–∂–µ —á–∞—â–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ü–∞—Ä–∞–ø–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è–º–∏

# <div class="alert alert-success">
# <font size="4"><b>‚úîÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ V2</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />    
# üëå

# ## –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞

# ### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

# –ü—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å, –≤—ã—è–≤–∏–º —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ at_fault.
# 
# –¢–∞–±–ª–∏—Ü–∞ vehicles:
# 
# -vehicle_transmission - –∞–≤—Ç–æ —Å –ú–ö–ü–ü –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–µ–µ –¥–ª—è –Ω–µ–æ–ø—ã—Ç–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –∫–∞—Ä—à–µ—Ä–∏–Ω–≥.
# 
# –¢–∞–±–ª–∏—Ü–∞ parties:
# 
# -at_fault - —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫;
# -cellphone_in_use - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–Ω–∏–∂–∞–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å;
# -party_sobriety - —Ç—Ä–µ–∑–≤–æ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è;
# 
# –¢–∞–±–ª–∏—Ü–∞ collisions:
# 
# -weather_1 - –ø–æ–≥–æ–¥–∞;
# -intersection - —á–∞—â–µ –≤—Å–µ–≥–æ, –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –î–¢–ü –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∏–º–µ–Ω–Ω–æ –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞—Ö;
# -pcf_violation_category- –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∞–≤–∞—Ä–∏–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –∞–≤–∞—Ä–∏–∏ –≤ –±—É–¥—É—â–µ–º;
# -motor_vehicle_involved_with - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –î–¢–ü, –≤—ã—è–≤–ª–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∑–≤–æ–ª–∏—Ç —É–º–µ–Ω—å—à–∏—Ç—å —á–∏—Å–ª–æ –¥—Ç–ø;
# -road_surface - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–æ—Ä–æ–≥–∏ - –≥–æ–ª–æ–ª–µ–¥, –º–æ–∫—Ä–∞—è/—Å–∫–æ–ª—å–∑–∫–∞—è/—Å—É—Ö–∞—è –¥–æ—Ä–æ–≥–∞;
# -control_device - –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–≥–æ —É—Ç—Ä–æ–π—Å—Ç–≤–∞ - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–¥–µ—Ç –æ–∫–∞–∑–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ
# -lighting - –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å –¥–æ—Ä–æ–≥–∏.
# 
# 
# –° –ø–æ–º–æ—â—å—é –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–≥—Ä—É–∑–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É. –ü–æ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏, –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞ 2012 –≥–æ–¥, –≥–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∞–≤–∞—Ä–∏–∏ - –º–∞—à–∏–Ω–∞ –∏ —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –±–æ–ª—å—à–µ —á–µ–º —Ü–∞—Ä–∞–ø–∏–Ω–∞.
# 
# 
# 

# In[15]:


query = '''

SELECT DISTINCT c.case_id,
       weather_1,
       pcf_violation_category,
       vehicle_age,
       motor_vehicle_involved_with,
       road_surface,
       control_device,
       lighting,
       vehicle_transmission,
       cellphone_in_use, 
       party_sobriety,
       at_fault
       
FROM collisions c
inner JOIN parties p ON c.case_id = p.case_id inner JOIN vehicles v ON c.case_id = v.case_id 
WHERE (extract(YEAR FROM cast(collision_date AS date))::int = 2012
  AND party_type = 'car'
  AND collision_damage != 'scratch')


'''
df = pd.read_sql_query(query, con=engine) 

df.head()


# In[16]:


df.info()


# In[17]:


df.isna().sum()/len(df)


# In[18]:


df = df.dropna() 


# –£–¥–∞–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è , —Ç–∞–∫ –∫–∞–∫ –∏—Ö –¥–æ–ª—è –æ—á–µ–Ω—Ç –º–∞–ª–∞

# In[19]:


df.duplicated().sum()


# –î—É–±–ª–∏–∫–∞—Ç—ã –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç

# In[20]:


df = df.drop('case_id', axis=1) 


# In[21]:


df['lighting'].unique() 


# In[22]:


def fix_value(cell):
     cell = cell.replace(' ', '_')  # —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–º–µ–Ω—è—é—â–∞—è –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
     return cell 


# In[23]:


df['lighting'] = df['lighting'].apply(lambda x: 'dark' if 'dark' in x else x)
df['lighting'] = df['lighting'].apply(fix_value)


# In[24]:


df['lighting'].unique() 


# –ò–∑–±–∞–≤–∏–ª–∏—Å—å –æ—Ç –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ–±—ä–µ–¥–∏–Ω–∏–≤ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–µ —É–ª–∏—Ü—É –±–µ–∑ —Å–≤–µ—Ç–∞ –≤ –æ–¥–Ω—É

# In[25]:


df['party_sobriety'].unique() 


# In[26]:


df['party_sobriety'] = df['party_sobriety'].apply(lambda x: 'sober' if 'had not' in x else x)
df['party_sobriety'] = df['party_sobriety'].apply(lambda x: 'drunk' if 'had been' in x else x)
df['party_sobriety'] = df['party_sobriety'].apply(lambda x: 'drunk' if 'impairment' in x else x)

df['party_sobriety'] = df['party_sobriety'].apply(fix_value)

df['party_sobriety'].unique()


# –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ–æ–±—ä–µ–¥–∏–Ω–∏–≤ –∏—Ö –ø–æ —Å–º—ã—Å–ª—É 

# –î–∞–ª–µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—å–µ–¥–∏–Ω–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –ø–µ—à–µ—Ö–æ–¥–∞–º–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É, —Ç–∫ –∑–∞–¥–∞—á–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏—á–∏–Ω—ã —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∞–≤–∞—Ä–∏–π. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏.

# In[27]:


df['pcf_violation_category'].unique() 


# In[28]:


df['pcf_violation_category'] = df['pcf_violation_category'].apply(lambda x: 'equipment_fault' if x == 'brakes' 
                                                                  or x == 'other equipment'
                                                                  or x == 'lights' else x)
df['pcf_violation_category'] = df['pcf_violation_category'].apply(lambda x: 'pedestrian_involved' if x == 'automobile right of way' 
                                                                  or x == 'pedestrian violation'  
                                                                  or x == 'other than driver (or pedestrian)'
                                                                  or x == 'pedestrian right of way'
                                                                  or x == 'improper passing' else x)

df['pcf_violation_category'] = df['pcf_violation_category'].apply(fix_value)

df['pcf_violation_category'].unique() 


# In[29]:


df['motor_vehicle_involved_with'].unique() 


# In[30]:


df['motor_vehicle_involved_with'] = df['motor_vehicle_involved_with'].apply(lambda x: 'other_vehicle' if x == 'other motor vehicle' 
                                                                  or x == 'motor vehicle on other roadway' else x)

df['motor_vehicle_involved_with'] = df['motor_vehicle_involved_with'].apply(lambda x: 'fixed object' if x == 'parked motor vehicle' else x)

df['motor_vehicle_involved_with'] = df['motor_vehicle_involved_with'].apply(fix_value)

df['motor_vehicle_involved_with'].unique() 


# In[31]:


# –ö–û–î –†–ï–í–¨–Æ–ï–†–ê
df.duplicated().sum()


# In[32]:


df= df.drop_duplicates()


# In[33]:


df.duplicated().sum()


# In[34]:


print('vehicle_age')
sum_outliers = (df['vehicle_age'] > 19).sum()
print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤ {sum_outliers}')


# In[35]:


df = df.query('vehicle_age <= 19')


# In[37]:


df.describe()


# <div class="alert alert-success">
# <font size="4"><b>‚úîÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ V2</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />    
# üëå

# –ü–æ–Ω—è–ª

# In[38]:


# –ö–û–î –†–ï–í–¨–Æ–ï–†–ê
df.describe()


# –ò–∑–±–∞–≤–∏–ª—Å—è –æ—Ç –≤—ã–±—Ä–æ—Å–æ–≤

# ## –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –î–¢–ü

# –ü—Ä–æ–≤–µ–¥–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:

# In[111]:


categorial = ['weather_1', 
              'pcf_violation_category',
              'motor_vehicle_involved_with', 
              'road_surface',
              'control_device', 
              'lighting', 
              'vehicle_transmission', 
              'party_sobriety' ]


# In[112]:


df_tmp = pd.get_dummies(df, columns=categorial, drop_first=True)


# In[113]:


numeric =['cellphone_in_use']

scaler = StandardScaler()
scaler.fit(df_tmp[numeric])
df_tmp[numeric] = scaler.transform(df_tmp[numeric])

pd.options.mode.chained_assignment = None


# In[114]:


fig, ax = plt.subplots(figsize=(16,14))
df_tmp.corr().iloc[1].sort_values(ascending=False).drop('at_fault',axis = 0).plot.bar(ax=ax)
ax.set_title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
ax.set_ylabel('–í–∞–∂–Ω–æ—Å—Ç—å')
plt.grid()

fig.tight_layout()


# 
# –ò–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–∏–¥–∏–º, —á—Ç–æ –ø—Ä—è–º–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∏–Ω–æ–≤–Ω–æ—Å—Ç—å –≤ –î–¢–ü –æ–∫–∞–∑—ã–≤–∞–µ—Ç:
# 
# -–û—Ç—Å—É—Ç–≤–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
# -–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –Ω–µ–ø–æ–¥–≤–∏–∂–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
# -–†–∞–∑–ª–∏—á–Ω—ã–π –Ω–∞—Ä—É—à–µ–Ω–∏—è –ü–î–î
# -–ú–æ–∫—Ä–∞—è –∏–ª–∏ –∑–∞—Å–Ω–µ–∂–µ–Ω–∞—è –¥–æ—Ä–æ–≥–∞
# -–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ú–ö–ü–ü
# -–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
# 
# 
# –û–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:
# 
# -–¢—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å
# -–ü—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ
# -–ü–æ –≤–∏–Ω–µ –ø–µ—à–µ—Ö–æ–¥–æ–≤

# ## –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä–∫–∏ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

# In[115]:


X_train, X_test, y_train, y_test = train_test_split(df.drop('at_fault', axis=1), 
                                                    df['at_fault'], 
                                                    train_size=0.8, 
                                                    random_state=42, 
                                                    shuffle=True,
                                                   stratify=df['at_fault'])


# <div class="alert alert-info">
# <font size="4">üçï<b> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />
# –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞–Ω–¥–æ–º —Å—Ç–µ–π—Ç (–∏ –¥—Ä—É–≥–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã) –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –æ–ø–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ –µ–π. –ò–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å –¥—Ä—É–≥–∏–º —Ä–∞–Ω–¥–æ–º–æ–º –∏ –º–µ–Ω—è—Ç—å –ø–æ –∫–æ–¥—É –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö –≥–¥–µ –æ–Ω –∏—Å–ø–æ—å–∑—É–µ—Ç—Å—è —è–≤–Ω–æ —Ö—É–∂–µ, —á–µ–º –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –Ω–∞—á–∞–ª–µ –ø–æ–º–µ–Ω—è—Ç—å.

# In[116]:


tmp_train = X_train[categorial]
tmp_test= X_test[categorial]


encoder_ohe = OneHotEncoder(handle_unknown='ignore')
encoder_ohe.fit(X_train[categorial])

tmp_train = pd.DataFrame(encoder_ohe.transform(X_train[categorial]).toarray(), 
                                   columns=encoder_ohe.get_feature_names(),
                                   index=X_train.index)
tmp_test = pd.DataFrame(encoder_ohe.transform(X_test[categorial]).toarray(), 
                                   columns=encoder_ohe.get_feature_names(),
                                   index=X_test.index)

X_train.drop(categorial, axis=1, inplace=True)
X_train = X_train.join(tmp_train)

X_test.drop(categorial, axis=1, inplace=True)
X_test = X_test.join(tmp_test)


# In[117]:


class_frequency = y_train.value_counts(normalize=True)
print(class_frequency)
class_frequency.plot(kind='bar')


# In[118]:


class_frequency[0]/class_frequency[1]


# –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –±–ª–∏–∑–∫–æ –∫ 1:1, –∏—Ö –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏.
# 
# –ü—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–π –º–µ—Ç—Ä–∏–∫–∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å (precision), —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –≤–∞–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö, –∫–∞–∫ –≤–∏–Ω–æ–≤–Ω—ã–µ –≤ –∞–≤–∞—Ä–∏–∏, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–∫–∞–∑–∞–ª–∞—Å—å –≤–∏–Ω–æ–≤–Ω—ã–º–∏.
# 
# –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é metrics_func:

# In[119]:


def metrics_func(model):
    model.fit(X_train, y_train)
    predicted_test = model.predict(X_test)
    probabilities_test = model.predict_proba(X_test)
    probabilities_one_test = probabilities_test[:, 1]
    precision = precision_score(y_test, predicted_test)
    recall = recall_score(y_test, predicted_test)
    print('–¢–æ—á–Ω–æ—Å—Ç—å:', precision)
    print('–ü–æ–ª–Ω–æ—Ç–∞:', recall)
    print('–î–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:', accuracy_score(y_test, predicted_test)) 
    print('F1-–º–µ—Ä–∞:', f1_score(y_test, predicted_test))
    print('AUC-ROC:', roc_auc_score(y_test, probabilities_one_test), '\n')
    print('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:')
    print(confusion_matrix(y_test, predicted_test))

# —Å—Ç—Ä–æ–∏–º ROC-–∫—Ä–∏–≤—É—é
    fpr, tpr, thresholds = roc_curve(y_test, probabilities_one_test)

    plt.figure()

    plt.plot([0, 1], [0, 1], linestyle='--')
    plt.plot(fpr, tpr)

    plt.xlim([0, 1])
    plt.ylim([0, 1])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC-–∫—Ä–∏–≤–∞—è')
    
    plt.show()
    return precision, predicted_test, probabilities_one_test, model


# <div class="alert alert-info">
# <font size="4">üçï<b> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />
# –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º –º–µ—Ç—Ä–∏–∫–∏ F1 —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, —á—Ç–æ –¥–ª—è –Ω–µ—ë —Ç–æ—á–Ω–æ—Å—Ç—å –∏ –ø–æ–ª–Ω–æ—Ç–∞ —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω—ã, –∞ –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –Ω–µ —Ç–∞–∫. –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å–Ω–∏–∑–∏—Ç –Ω–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –≤–æ–¥–∏—Ç–µ–ª—è–º, –∏–∑-–∑–∞ —á–µ–≥–æ –º—ã –º–æ–∂–µ–º –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Ö –ª–æ—è–ª—å–Ω–æ—Å—Ç—å. –ù–∏–∑–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞ - —É–≥—Ä–æ–∑–∞ –∑–¥–æ—Ä–æ–≤—å—é –∏ –∂–∏–∑–Ω–∏ –ª—é–¥–µ–π. –í—Ç–æ—Ä–æ–µ –≤–∞–∂–Ω–µ–µ. –ü–æ—ç—Ç–æ–º—É –µ—Å—Ç—å —Å–º—ã—Å–ª –≤–∑—è—Ç—å <a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.fbeta_score.html">F-beta</a> –º–µ—Ä—É —Å —É–∫–ª–æ–Ω–æ–º –Ω–∞ –ø–æ–ª–Ω–æ—Ç—É (beta=2, –Ω–∞–ø—Ä–∏–º–µ—Ä)

# ## –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π

# In[120]:


params =  {'max_depth': range (1,20, 2),
           'min_samples_leaf': range (1,18),
           'min_samples_split': range (2,20,2)}
           
model = DecisionTreeClassifier()

grid = RandomizedSearchCV(model,
    param_distributions=params, 
    scoring='precision', 
    n_jobs=-1, 
    random_state=12345
)

grid.fit(X_train, y_train)

print(grid.best_params_)


# <div class="alert alert-warning">
# <font size="4"><b>‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
#         <b></b>
# 
# `scoring='precision'`
# 
# –û—á–µ–Ω—å –Ω–µ–±–µ—Å—Å–ø–æ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –°–º–æ—Ç—Ä–∏, –µ—Å–ª–∏ —É –Ω–∞—Å –±—É–¥–µ—Ç –Ω–∏–∑–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞, –Ω–æ –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, —Ç–æ –º—ã –≤ —Ç–µ–æ—Ä–∏–∏ –±—É–¥–µ–º –ø–ª–æ—Ö–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ø—É—Å–∫–∞—Ç—å –¥–æ –ø–æ–µ–∑–¥–æ–∫. –ï—Å–ª–∏ –∂–µ –≤—ã—Å–æ–∫–∞—è –ø–æ–ª–Ω–æ—Ç–∞ –∏ –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, —Ç–æ –±—É–¥–µ–º –≤ —Ç–µ–æ—Ä–∏–∏ —Ö–æ—Ä–æ—à–∏—Ö –Ω–µ–¥–æ–ø—É—Å–∫–∞—Ç—å. –ü–µ—Ä–≤–æ–µ —á—Ä–µ–≤–∞—Ç–æ —Ç—Ä–∞–≤–º–∞–º–∏ –∏ —É–≤–µ—á–∏—è–º–∏ –ª—é–¥–µ–π, –≤—Ç–æ—Ä–æ–µ - –ø–æ—Ç–µ—Ä–µ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ö–∞–∂–µ—Ç—Å—è, –≤—Å—ë-—Ç–∞–∫–∏ –≤–∞–∂–Ω–µ–µ –ø–µ—Ä–≤–æ–µ.

# In[121]:


precision_dt, predictions_dt, probabilities_dt, model_dt  = metrics_func(DecisionTreeClassifier(max_depth=7, 
                                                                                             min_samples_split=14, 
                                                                                             min_samples_leaf=10, 
                                                                                             random_state=12345,
                                                                                             class_weight='balanced'))


# <div class="alert alert-warning">
# <font size="4"><b>‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
#         <b></b>
# 
# `DecisionTreeClassifier(max_depth=7, min_samples_split=14, 
#                         min_samples_leaf=10, random_state=12345,
#                         class_weight='balanced')`
# 
# –û–¥–Ω–æ –∏–∑ –∑–æ–ª–æ—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –Ω–µ –Ω–∞–¥–æ <a href="https://ru.hexlet.io/blog/posts/ponimaem-sleng-programmistov-mini-slovar-dlya-nachinayuschih-razrabotchikov#:~:text=%D0%A5%D0%B0%D1%80%D0%B4%D0%BA%D0%BE%D0%B4%D0%B8%D1%82%D1%8C%20%E2%80%94%20%D1%81%D1%82%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%20%D0%BF%D1%80%D0%BE%D0%BF%D0%B8%D1%81%D1%8B%D0%B2%D0%B0%D1%82%D1%8C%20%D0%B2%20%D0%BA%D0%BE%D0%B4%D0%B5%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5%2C%20%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D1%8B%D0%B5%20%D0%B4%D0%BE%D0%BB%D0%B6%D0%BD%D1%8B%20%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D1%8F%D1%82%D1%8C%D1%81%D1%8F%20%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8.">—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å</a> —Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–µ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å.
# 
# –ü–æ—á–µ–º—É —ç—Ç–æ –ø–ª–æ—Ö–æ –Ω–∞ —Ç–≤–æ—ë–º –ø—Ä–∏–º–µ—Ä–µ. –¢—ã –Ω–∞—à—ë–ª –∫–∞–∫–∏–µ-—Ç–æ –ª—É—á—à–∏–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ—Ç–æ–º —Ä—É—á–∫–∞–º–∏ –∏—Ö –≤–ø–∏—Å–∞–ª –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏. –ê –≤–æ—Ç —Ä–µ–≤—å—é–µ—Ä –≤–∑—è–ª –∏ –ø–æ–º–µ–Ω—è–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª –±—ã—Å—Ç—Ä–µ–µ, –Ω–∞—à–ª–∏—Å—å –¥—Ä—É–≥–∏–µ. –ò —É –Ω–µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å–Ω–∞—á–ª–∞ –≥–æ—Ä–∏—Ç –Ω–∞–¥–ø–∏—Å—å —á—Ç–æ "–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —Ç–∞–∫–∏–µ", –∞ –ø–∞—Ä–æ–π –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –Ω–∏–∂–µ —Å—Ç—É–¥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–∏–µ. –ü–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å –ø–æ–º–µ–Ω—è—Ç—å —Ä–∞–Ω–¥–æ–º —Å—Ç–µ–π—Ç - —Ç–∞ –∂–µ –∏—Å—Ç–æ—Ä–∏—è, –Ω–∞—à–ª–∏ –æ–¥–Ω–∏, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–∏–µ. –ê —É–∂ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª—Å—è –¥–∞—Ç–∞—Å–µ—Ç... –ò –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Ç–µ–±–µ –Ω–∞–¥–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –≤–ø–∏—Å–∞–Ω–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–∞–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ. –ù—É —Ç–∞–∫–æ–µ. –ì–æ–≤–æ—Ä—è –ø—Ä–æ—Ñ —è–∑—ã–∫–æ–º, —Ç–∞–∫–æ–π –∫–æ–¥ —Å–ª–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É —Ö–∞—Ä–¥–∫–æ–¥ –∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω–æ–º.
# 
# –ß—Ç–æ –∂–µ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å?
# 
# –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≥—Ä–∏–¥ —Å–µ—Ä—á –∏–ª–∏ —Ä–∞–Ω–¥–æ–º–∞–π–∑–¥ —Å–µ—Ä—á –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–∏—Å–∫, –º–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –Ω–∞ –ø–æ–ª–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∞—Ç—Ä–∏–±—É—Ç `.best_estimator_`, —Ç–∞–∫ —á—Ç–æ –Ω–∏—á–µ–≥–æ –∑–∞–Ω–æ–≤–æ –æ–±—É—á–∞—Ç—å –≤–æ–æ–±—â–µ –Ω–µ –Ω—É–∂–Ω–æ, –±–µ—Ä—ë—à—å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —ç—Ç–æ—Ç —Å–∞–º—ã–π `grid.best_estimator_`

# ## –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
# 

# In[61]:


params =  {'n_estimators': range(10, 110, 15),
           'max_depth': range (1,15),
           'min_samples_leaf': range (1,8),
           'min_samples_split': range (2,10,2)}
           
model = RandomForestClassifier()

grid = RandomizedSearchCV(model,
    param_distributions=params, 
    scoring='precision', 
    n_jobs=-1, 
    random_state=12345
)

grid.fit(X_train, y_train)

print(grid.best_params_)


# In[62]:


precision_rf, predictions_rf, probabilities_rf, model_rf = metrics_func(RandomForestClassifier(n_estimators=85, 
                                                                                 max_depth=8, 
                                                                                 min_samples_split=8, 
                                                                                 min_samples_leaf=1, 
                                                                                 random_state=12345,
                                                                                 class_weight='balanced'))


# ## LightGBM

# In[125]:


params =  {'n_estimators': range(10, 110, 15),
           'max_depth': range (1,15),
           'num_leaves': range (2,80, 10)}
           
model = LGBMClassifier()

grid_GBM = RandomizedSearchCV(model,
    param_distributions=params, 
    scoring='precision', 
    n_jobs=-1, 
    random_state=12345
)

grid.fit(X_train, y_train)

print(grid.best_params_)


# In[126]:


precision_lgbm, predictions_lgbm, probabilities_lgbm, model_lgbm = metrics_func(LGBMClassifier(boosting_type='gbdt',
                                                                                            random_state=12345, 
                                                                                            max_depth=7,
                                                                                            n_estimators=10,
                                                                                            learning_rate = 0.1,
                                                                                            num_leaves = 32,
                                                                                            class_weight='balanced'))


# ## Catboost

# In[48]:


params =  {'iterations': range(100,2500, 500),
           'depth': range (1,15)}
           
model = CatBoostClassifier()

grid = RandomizedSearchCV(model,
    param_distributions=params, 
    scoring='precision', 
    n_jobs=-1, 
    random_state=12345
)

grid.fit(X_train, y_train)

print(grid.best_params_)


# In[ ]:





# In[49]:


precision_cb, predictions_cb, probabilities_cb, model_cb = metrics_func(CatBoostClassifier(depth=5,
                                                                                        iterations=1100,
                                                                                        random_seed=60,
                                                                                        learning_rate=0.003))


# –ü—Ä–æ–≤–µ—Ä–∏–º –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –Ω–∞ –ø—É—Å—Ç—ã—à–∫–µ 

# In[50]:


precision_dumm, predictions_dumm, probabilities_dumm, model_dumm  = metrics_func(DummyClassifier(strategy='most_frequent'))


# In[91]:


X_train.columns
X_test.columns


# In[ ]:





# –û—Ñ–æ—Ä–º–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã:

# In[75]:


result = pd.DataFrame ([
    [precision_dt],
    [precision_rf],
    [precision_lgbm],
    [precision_cb],
    [precision_dumm]], 
    columns=['precision'],
    index=['DecisionTree','RandomForest', 'LightGBM', 'CatBoost', 'Dummy'])
result.sort_values(by='precision', ascending=False)


# –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑–∞–ª–∞ –º–æ–¥–µ–ª—å LightGBM, –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–±–æ—Ç—É —Å –Ω–µ–π.

# <div class="alert alert-success">
# <font size="4"><b>‚úîÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />    
# –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã –∏—Å–∫–∞–ª –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏ —á—Ç–æ –¥–∞–º–º–∏-–º–æ–¥–µ–ª—å –≤ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ –µ—Å—Ç—å, —Ç—ã –º–æ–∂–µ—à—å —Ç–æ—á–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º–æ–¥–µ–ª–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ

# ## –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏

# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –º–æ–¥–µ–ª–∏

# In[101]:


confusion_matrix(y_test, predictions_lgbm)


# <div class="alert alert-info">
# <font size="4">üçï<b> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />
# –ü—Ä–∏–µ–º–ª–µ–º–æ, –Ω–æ –ª—É—á—à–µ –≤—ã–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É —á–µ—Ä–µ–∑ <a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.ConfusionMatrixDisplay.html">ConfusionMatrixDisplay</a>, —Ç–∞–∫ –±—É–¥–µ—Ç –∫—Ä–∞—Å–∏–≤–µ–µ

# –ó–¥–µ—Å—å, –∫–∞–∫ –∏ –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞—Ö –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π, –º—ã –≤–∏–¥–∏–º –≤—ã—Å–æ–∫–æ–µ —á–∏—Å–ª–æ –ª–æ–∂–Ω–æ-–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –∏ –ø—Ä–∏ —ç—Ç–æ–º –º–∞–ª–æ–µ —á–∏—Å–ª–æ –ª–æ–∂–Ω–æ-–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö , —á—Ç–æ –Ω–µ–ø–ª–æ—Ö–æ. –õ—É—á—à–µ –æ—à–∏–±–æ—á–Ω–æ –ø—Ä–µ–∑–¥—Å–∫–∞–∑–∞—Ç—å –∞–≤–∞—Ä–∏–π–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, —á–µ–º –æ—à–∏–±–æ—á–Ω–æ –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å.

# In[102]:


precision, recall, thresholds = precision_recall_curve(y_test, probabilities_lgbm)

fig, ax = plt.subplots()
ax.plot(recall, precision)

ax.set_title('Precision-Recall Curve')
ax.set_ylabel('Precision')
ax.set_xlabel('Recall')

plt.show()


# <div class="alert alert-success">
# <font size="4"><b>‚úîÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
#     <br /> 
#     <font size="3", color = "black">
# <br />    
# –û, –∞ –≤–æ—Ç —Ç—É—Ç –ø—Ä—è–º –º–æ–ª–æ–¥–µ—Ü! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ—è—Ç –∫—Ä–∏–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç–∏-–ø–æ–ª–Ω–æ—Ç—ã –Ω–µ –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º, –∞ –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º –∫–ª–∞—Å—Å–æ–≤, –ø–æ–ª—É—á–∞—é—Ç "—Å—Ç—É–ø–µ–Ω—å–∫—É" –∏ –¥–∞–∂–µ –Ω–µ –∑–∞–¥—É–º—ã–≤–∞—é—Ç—Å—è, —á—Ç–æ —á—Ç–æ-—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ç–∞–∫ :)
# 
# –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –æ–∫–∞–∑–∞–ª—Å—è –æ–¥–Ω–∏–º –∏–∑ –Ω–µ–º–Ω–æ–≥–∏—Ö, –∫—Ç–æ –ø–æ—Å—Ç—Ä–æ–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ä–∞–∑—É!

# –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤—ã–Ω—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –î–¢–ü

# In[103]:


smf = SelectFromModel(model_lgbm, threshold=-np.inf, max_features = 25)
smf.fit(X_train, y_train)
features_index = smf.get_support()
features_1 = X_train.columns[features_index]
features_1


# In[104]:


fig, ax = plt.subplots(figsize=(16,14))
df_tmp.corr().iloc[1].sort_values(ascending=False).drop('at_fault',axis = 0).plot.bar(ax=ax)
ax.set_title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
ax.set_ylabel('–í–∞–∂–Ω–æ—Å—Ç—å')
plt.grid()

fig.tight_layout()


# In[131]:


importances = model_lgbm.feature_importances_

feature_importances = list(zip(X_train.columns, importances))
feature_importances.sort(key=lambda x: x[1], reverse=True)

top_10_features = feature_importances[:10]

plt.figure(figsize=(10, 6))
plt.bar(range(len(top_10_features)), [x[1] for x in top_10_features], tick_label=[x[0] for x in top_10_features])
plt.xlabel('–ü—Ä–∏–∑–Ω–∞–∫–∏')
plt.ylabel('–í–∞–∂–Ω–æ—Å—Ç—å')
plt.title('–¢–æ–ø 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é')
plt.xticks(rotation=90)
plt.show()

for feature, importance in top_10_features:
    print(f'–ü—Ä–∏–∑–Ω–∞–∫: {feature}, –í–∞–∂–Ω–æ—Å—Ç—å: {importance}')


# In[138]:


plt.figure(figsize=[5,6])
sns.barplot(x=y_train, y=X_train['cellphone_in_use'])
plt.title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∞ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π')
plt.xlabel('–§–∞–∫—Ç –≤–∏–Ω—ã –≤ –î–¢–ü')
plt.ylabel('–§–∞–∫—Ç–æ—Ä')
plt.grid()
plt.show()


# –û—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É—é—à–∏–π –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–æ –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –ø–æ–ø–∞—Å—Ç—å –≤ –¥—Ç–ø. 
# –î–ª—è –±–æ—Ä—å–±—ã —Å —ç—Ç–∏–º –≤–æ–∑–º–æ–∂–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–µ–π –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä—ã —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± —ç—Ç–æ–º. –ò–ª–∏ —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–∞–µ—Ç –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ –Ω–∞ —Ä—É–ª–µ –Ω–µ—Ç –¥–≤—É—Ö —Ä—É–∫ –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 5-10 —Å–µ–∫—É–Ω–¥, –ø–æ—Ö–æ–∂–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —É–¥–µ—Ä–∂–∏–≤–∞–Ω–∏—è —Ä—É–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Tesla

# ## –í—ã–≤–æ–¥—ã

# In[ ]:


–ù–∞–∏–ª—É—á—à–µ–π —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ–ª—å –º–æ–¥–µ–ª—å CatBoostClassifier() –ø—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ n_estimators —Ä–∞–≤–Ω–æ–º—É 1100, –ø–∞—Ä–∞–º–µ—Ç—Ä–µ depth —Ä–∞–≤–Ω–æ–º—É 5 –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ learning_rate —Ä–∞–≤–Ω–æ–º—É 0,003 –∏–º–µ–µ—Ç –Ω–∞–∏–ª—É—á—à—É—é –º–µ—Ç—Ä–∏–∫—É precision, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–≤–Ω—è–µ—Ç—Å—è 0,665 –Ω–∞ —Ç—Ä–µ–π–Ω–µ –ø—Ä–∏ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ 0.665 –Ω–∞ —Ç–µ—Å—Ç–µ.
–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ–∑–º–æ–∂–Ω–æ, –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–∏–ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–º–∏, –¥–ª—è –ª—É—á—à–µ–π –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–∏—Ä–∞—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö.
–ß—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –º–æ–¥–µ–ª—å –º–æ–∂–Ω–æ:
—É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è: –æ–ø—ã—Ç –≤–æ–∂–¥–µ–Ω–∏—è, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —É—á–∞—Å—Ç–∏–µ –≤ –î–¢–ü –≤ –ø—Ä–æ—à–ª–æ–º –∏ —Ç.–¥.
—É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —É –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∞—Å–Ω—ã—Ö –¥–æ—Ä–æ–∂–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
—Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é –æ —Ñ–∞–∫—Ç–æ—Ä–∞—Ö, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —É—Å–ª–æ–≤–∏—è –≤–æ–∂–¥–µ–Ω–∏—è: –ø–ª–æ—Ö–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –ø–ª–æ—Ö–∏–µ –¥–æ—Ä–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å
–ø–æ—Å—Ç–∞–≤–∞–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–∫–∞–º–µ—Ä—ã, –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∞–ª–∫–æ–ª—å–Ω–æ–≥–æ –æ–ø—å—è–Ω–µ–Ω–∏—è –∏ —Ç.–¥) –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è


# In[ ]:




